/*
	전역함수 연산자 오버로딩 : private
*/
#include <iostream>
using namespace std;

class Complex {
private:
	double real, image;
public:
	Complex(double r = 0, double i = 0) : real(r), image(i) {}
	Complex add(const Complex& other) {
		return Complex(real + other.real, image + other.image);
	}
	Complex operator+(const Complex& other){
		return Complex(real + other.real, image + other.image);
	}
	Complex operator*(int n) {
		return Complex(real * n, image * n);
	}
	void showComplex() {
		cout << "real : " << real << " image: " << image << endl;

	}
	friend Complex operator*(int n, const Complex& other);		// 함수 원형에 friend 선언을 하면 private 또는 protected 멤버의 접근이 허용된다.
	friend std::ostream& operator<<(std::ostream& out, const Complex& other);
};
Complex operator*(int n, const Complex& other) {
	return Complex(n * other.real, n * other.image);
}
std::ostream& operator<<(std:: ostream& out, const Complex& other) {
	out << other.real << ", " << other.image;
	return out;

}

int main()
{

	Complex c(1.1, 2.1);
	Complex c2(3.2, 4.2);
	Complex c3 = c + c2;
	c3.showComplex();
	Complex c4 = c * 100;
	c4.showComplex();
	Complex c5 = 100 * c3;
	c5.showComplex();

	cout << c << endl;			// 출력 연산자(<<) 는 기본적으로 객체를 출력할 수 없다.


	return 0;
}